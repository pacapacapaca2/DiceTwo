document.addEventListener("DOMContentLoaded", () => {
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∫—É–±–∏–∫–æ–≤
  const DICE_COLLECTIONS = [
    {
      id: "classic",
      name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ",
      dices: [
        { id: "classic_red", name: "–ö—Ä–∞—Å–Ω—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", image: "images/dice_red.png", unlocked: true },
        { id: "classic_blue", name: "–°–∏–Ω–∏–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", image: "images/dice_blue.png", unlocked: true },
        { id: "classic_gold", name: "–ó–æ–ª–æ—Ç–æ–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", image: "images/dice_gold.png", unlocked: false, requirement: "level_5" }
      ]
    },
    {
      id: "premium",
      name: "–ü—Ä–µ–º–∏—É–º",
      dices: [
        { id: "premium_crystal", name: "–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π", image: "images/dice_crystal.png", unlocked: false, requirement: "level_10" },
        { id: "premium_neon", name: "–ù–µ–æ–Ω–æ–≤—ã–π", image: "images/dice_neon.png", unlocked: false, requirement: "level_15" },
        { id: "premium_galaxy", name: "–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π", image: "images/dice_galaxy.png", unlocked: false, requirement: "level_20" }
      ]
    }
  ];

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const ACHIEVEMENTS = [
    { id: "first_roll", name: "–ü–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫", description: "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤", points: 10, progress: 0, target: 1 },
    { id: "roll_50", name: "–ù–∞—á–∏–Ω–∞—é—â–∏–π –∏–≥—Ä–æ–∫", description: "–°–¥–µ–ª–∞–π—Ç–µ 50 –±—Ä–æ—Å–∫–æ–≤", points: 25, progress: 0, target: 50 },
    { id: "roll_100", name: "–û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫", description: "–°–¥–µ–ª–∞–π—Ç–µ 100 –±—Ä–æ—Å–∫–æ–≤", points: 50, progress: 0, target: 100 },
    { id: "doubles_10", name: "–î—É–±–ª—å", description: "–í—ã–±—Ä–æ—Å–∏—Ç–µ 10 –¥—É–±–ª–µ–π", points: 30, progress: 0, target: 10 },
    { id: "snake_eyes", name: "–ó–º–µ–∏–Ω—ã–µ –≥–ª–∞–∑–∞", description: "–í—ã–±—Ä–æ—Å–∏—Ç–µ –¥–≤–æ–π–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É", points: 15, progress: 0, target: 1 },
    { id: "lucky_7", name: "–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º–µ—Ä–∫–∞", description: "–í—ã–±—Ä–æ—Å–∏—Ç–µ —Å—É–º–º—É 7 –ø—è—Ç—å —Ä–∞–∑", points: 20, progress: 0, target: 5 }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  const loadUserData = () => {
    const rollCount = parseInt(localStorage.getItem('dice_roll_count') || '0');
    const points = parseInt(localStorage.getItem('dice_points') || '0');
    const level = Math.floor((rollCount * 8) / 100); // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫—É–±–∏–∫–æ–≤
    const diceCollection = JSON.parse(localStorage.getItem('dice_collection') || 'null') || DICE_COLLECTIONS;
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫—É–±–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    diceCollection.forEach(collection => {
      collection.dices.forEach(dice => {
        if (dice.requirement === "level_5" && level >= 5) dice.unlocked = true;
        if (dice.requirement === "level_10" && level >= 10) dice.unlocked = true;
        if (dice.requirement === "level_15" && level >= 15) dice.unlocked = true;
        if (dice.requirement === "level_20" && level >= 20) dice.unlocked = true;
      });
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    localStorage.setItem('dice_collection', JSON.stringify(diceCollection));
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    let achievements = JSON.parse(localStorage.getItem('dice_achievements') || 'null') || ACHIEVEMENTS;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if (rollCount > 0 && achievements[0].progress === 0) {
      achievements[0].progress = 1;
      achievements[0].completed = true;
    }
    
    achievements[1].progress = Math.min(rollCount, 50);
    achievements[1].completed = rollCount >= 50;
    
    achievements[2].progress = Math.min(rollCount, 100);
    achievements[2].completed = rollCount >= 100;
    
    // –î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–æ—Å–∫–æ–≤
    const rollHistory = JSON.parse(localStorage.getItem('dice_roll_history') || '[]');
    let doublesCount = 0;
    let snakeEyesCount = 0;
    let lucky7Count = 0;
    
    rollHistory.forEach(roll => {
      if (roll.dice1 === roll.dice2) doublesCount++;
      if (roll.dice1 === 1 && roll.dice2 === 1) snakeEyesCount++;
      if (roll.sum === 7) lucky7Count++;
    });
    
    achievements[3].progress = Math.min(doublesCount, 10);
    achievements[3].completed = doublesCount >= 10;
    
    achievements[4].progress = Math.min(snakeEyesCount, 1);
    achievements[4].completed = snakeEyesCount >= 1;
    
    achievements[5].progress = Math.min(lucky7Count, 5);
    achievements[5].completed = lucky7Count >= 5;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    localStorage.setItem('dice_achievements', JSON.stringify(achievements));
    
    return {
      rollCount,
      points,
      level,
      diceCollection,
      achievements
    };
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
  const createProfileUI = () => {
    const userData = loadUserData();
    const contentContainer = document.querySelector('.min-page-content-height');
    if (!contentContainer) return;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    contentContainer.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    const profileSection = document.createElement('div');
    profileSection.className = 'daily-section';
    profileSection.innerHTML = `
      <div class="profile-header">
        <div class="profile-avatar">
          <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
            <circle cx="30" cy="30" r="30" fill="var(--tg-theme-button-color)"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M30 32C33.866 32 37 28.866 37 25C37 21.134 33.866 18 30 18C26.134 18 23 21.134 23 25C23 28.866 26.134 32 30 32ZM30 35C24.477 35 20 39.477 20 45V45.5C20 46.881 21.119 48 22.5 48H37.5C38.881 48 40 46.881 40 45.5V45C40 39.477 35.523 35 30 35Z" fill="white"/>
          </svg>
        </div>
        <div class="profile-info">
          <div class="profile-name">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>
          <div class="profile-stats">
            <div class="profile-level">
              –£—Ä–æ–≤–µ–Ω—å <span class="level-badge">${userData.level}</span>
            </div>
            <div class="profile-points">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                <path d="M8 1L10.326 5.70729L15.5 6.52786L11.75 10.1881L12.652 15.3458L8 12.9L3.348 15.3458L4.25 10.1881L0.5 6.52786L5.674 5.70729L8 1Z" fill="var(--tg-theme-accent-text-color)"/>
              </svg>
              ${userData.points} –æ—á–∫–æ–≤
            </div>
          </div>
        </div>
      </div>
    `;
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫—É–±–∏–∫–æ–≤
    const collectionSection = document.createElement('div');
    collectionSection.className = 'daily-section';
    
    let collectionHTML = `
      <div class="section-header">
        <div class="section-title">–ö–æ–ª–ª–µ–∫—Ü–∏—è –∫—É–±–∏–∫–æ–≤</div>
      </div>
    `;
    
    userData.diceCollection.forEach(collection => {
      collectionHTML += `
        <div class="collection-category">
          <div class="category-title">${collection.name}</div>
          <div class="collection-grid">
            ${collection.dices.map(dice => `
              <div class="dice-item ${dice.unlocked ? '' : 'locked'}">
                <div class="dice-preview">
                  ${dice.unlocked 
                    ? `<img src="${dice.image}" alt="${dice.name}" onerror="this.src='images/dice_default.png'">`
                    : `<div class="dice-locked">üîí</div>`
                  }
                </div>
                <div class="dice-name">${dice.name}</div>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    });
    
    collectionSection.innerHTML = collectionHTML;
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const achievementsSection = document.createElement('div');
    achievementsSection.className = 'daily-section';
    
    let achievementsHTML = `
      <div class="section-header">
        <div class="section-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</div>
      </div>
    `;
    
    userData.achievements.forEach(achievement => {
      achievementsHTML += `
        <div class="task-item ${achievement.completed ? 'completed' : ''}">
          <div class="task-info">
            <div class="task-description">${achievement.name}</div>
            <div class="task-progress">
              <div class="task-progress-text">${achievement.progress}/${achievement.target}</div>
              <div class="task-reward">+${achievement.points}</div>
            </div>
          </div>
          <div class="achievement-description">${achievement.description}</div>
          <div class="task-progress-bar">
            <div class="task-progress-fill" style="width: ${Math.min(100, (achievement.progress / achievement.target) * 100)}%"></div>
          </div>
        </div>
      `;
    });
    
    achievementsSection.innerHTML = achievementsHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    contentContainer.appendChild(profileSection);
    contentContainer.appendChild(collectionSection);
    contentContainer.appendChild(achievementsSection);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    const styleElement = document.createElement('style');
    styleElement.textContent = `
      .daily-section {
        padding: 16px;
        margin-bottom: 16px;
        background: var(--tg-theme-section-bg-color);
        border-radius: 10px;
      }
      
      .profile-header {
        display: flex;
        align-items: center;
        margin-bottom: 16px;
      }
      
      .profile-avatar {
        width: 60px;
        height: 60px;
        margin-right: 16px;
        border-radius: 50%;
        overflow: hidden;
      }
      
      .profile-info {
        flex: 1;
      }
      
      .profile-name {
        font-size: 18px;
        font-weight: 590;
        color: var(--tg-theme-text-color);
        margin-bottom: 6px;
      }
      
      .profile-stats {
        display: flex;
        align-items: center;
      }
      
      .profile-level {
        font-size: 14px;
        color: var(--tg-theme-hint-color);
        margin-right: 12px;
        display: flex;
        align-items: center;
      }
      
      .profile-points {
        font-size: 14px;
        color: var(--tg-theme-hint-color);
        display: flex;
        align-items: center;
      }
      
      .profile-points svg {
        margin-right: 4px;
      }
      
      .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
      }
      
      .section-title {
        font-size: 17px;
        font-weight: 590;
        color: var(--tg-theme-text-color);
      }
      
      .collection-category {
        margin-bottom: 16px;
      }
      
      .category-title {
        font-size: 15px;
        color: var(--tg-theme-hint-color);
        margin-bottom: 8px;
      }
      
      .collection-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 12px;
      }
      
      .dice-item {
        background: var(--tg-theme-secondary-bg-color);
        border-radius: 10px;
        padding: 12px;
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      
      .dice-preview {
        width: 60px;
        height: 60px;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .dice-preview img {
        max-width: 100%;
        max-height: 100%;
      }
      
      .dice-locked {
        font-size: 24px;
      }
      
      .dice-name {
        font-size: 13px;
        color: var(--tg-theme-text-color);
        text-align: center;
      }
      
      .dice-item.locked {
        opacity: 0.5;
      }
      
      .level-badge {
        display: inline-block;
        background: var(--tg-theme-button-color);
        color: var(--tg-theme-button-text-color);
        font-size: 13px;
        font-weight: 590;
        padding: 2px 6px;
        border-radius: 12px;
        margin-left: 4px;
      }
      
      .achievement-description {
        font-size: 13px;
        color: var(--tg-theme-hint-color);
        margin-bottom: 8px;
      }
    `;
    
    document.head.appendChild(styleElement);
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  createProfileUI();
}); 