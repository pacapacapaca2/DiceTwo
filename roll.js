document.addEventListener("DOMContentLoaded", () => {
  const rollButton = document.getElementById("roll-button");
  const resultDiv = document.getElementById("result");
  const diceContainer = document.getElementById("dice-container");
  const dice1 = document.getElementById("dice1");
  const dice2 = document.getElementById("dice2");

  if (!rollButton || !resultDiv || !diceContainer || !dice1 || !dice2) {
    console.error("One or more DOM elements not found.");
    return;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π
  const taskManager = new DailyTasksManager();
  taskManager.initializeUI();

  let currentAnimations = []; // –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  let rollHistory = JSON.parse(localStorage.getItem('dice_roll_history') || '[]');
  let rollCount = parseInt(localStorage.getItem('dice_roll_count') || '0');
  let streakCount = parseInt(localStorage.getItem('dice_streak_count') || '0');
  let lastRollDate = localStorage.getItem('dice_last_roll_date') || '';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
  const today = new Date().toDateString();
  if (today !== lastRollDate) {
    streakCount = 0;
    localStorage.setItem('dice_streak_count', streakCount.toString());
    localStorage.setItem('dice_last_roll_date', today);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–æ–≤
  const updateRollCounter = () => {
    const rollCounterElement = document.getElementById('roll-counter');
    if (rollCounterElement) {
      rollCounterElement.textContent = rollCount.toString();
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ—Å–∫–æ–≤
  const updateRollHistory = (dice1Value, dice2Value, sum) => {
    const maxHistoryItems = 10;
    const timestamp = new Date().toISOString();
    
    rollHistory.unshift({
      dice1: dice1Value,
      dice2: dice2Value,
      sum: sum,
      timestamp: timestamp
    });
    
    if (rollHistory.length > maxHistoryItems) {
      rollHistory = rollHistory.slice(0, maxHistoryItems);
    }
    
    localStorage.setItem('dice_roll_history', JSON.stringify(rollHistory));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å—Ç—å
    const historyContainer = document.getElementById('roll-history-list');
    if (historyContainer) {
      renderRollHistory();
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–æ—Å–∫–æ–≤
  const renderRollHistory = () => {
    const historyContainer = document.getElementById('roll-history-list');
    if (!historyContainer) return;
    
    historyContainer.innerHTML = '';
    
    if (rollHistory.length === 0) {
      const emptyMessage = document.createElement('div');
      emptyMessage.className = 'history-empty';
      emptyMessage.textContent = '–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤ –ø—É—Å—Ç–∞';
      historyContainer.appendChild(emptyMessage);
      return;
    }
    
    rollHistory.forEach((roll, index) => {
      const historyItem = document.createElement('div');
      historyItem.className = 'history-item';
      
      const date = new Date(roll.timestamp);
      const formattedTime = `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
      
      historyItem.innerHTML = `
        <div class="history-dice">
          <span class="dice-value">${roll.dice1}</span> + 
          <span class="dice-value">${roll.dice2}</span> = 
          <span class="dice-sum">${roll.sum}</span>
        </div>
        <div class="history-time">${formattedTime}</div>
      `;
      
      historyContainer.appendChild(historyItem);
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤
  rollButton.addEventListener("click", () => {
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Roll
    rollButton.style.display = "none";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∫—É–±–∏–∫–æ–≤
    diceContainer.style.display = "flex"; // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    resultDiv.style.display = "none";    // –ü—Ä—è—á–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –æ–±–æ–∏—Ö –∫—É–±–∏–∫–æ–≤
    const randomRoll1 = Math.floor(Math.random() * 6) + 1;
    const randomRoll2 = Math.floor(Math.random() * 6) + 1;
    const totalResult = randomRoll1 + randomRoll2;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–æ–≤
    rollCount++;
    localStorage.setItem('dice_roll_count', rollCount.toString());
    updateRollCounter();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é
    if (randomRoll1 === randomRoll2) {
      streakCount++;
      localStorage.setItem('dice_streak_count', streakCount.toString());
      
      // –ï—Å–ª–∏ —Å–µ—Ä–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ 3, –¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
      if (streakCount === 3) {
        setTimeout(() => {
          taskManager.addPoints(50);
          
          const notification = document.createElement('div');
          notification.className = 'bonus-notification fadeInDown';
          notification.innerHTML = `
            <div class="notification-content">
              <div class="notification-icon">üé≤</div>
              <div class="notification-text">
                <div class="notification-title">–°–µ—Ä–∏—è –¥—É–±–ª–µ–π!</div>
                <div class="notification-description">3 –¥—É–±–ª—è –ø–æ–¥—Ä—è–¥</div>
              </div>
              <div class="notification-reward">+50</div>
            </div>
          `;
          
          document.body.appendChild(notification);
          
          setTimeout(() => {
            notification.classList.replace('fadeInDown', 'fadeInUp');
            setTimeout(() => notification.remove(), 200);
          }, 3000);
          
          streakCount = 0;
          localStorage.setItem('dice_streak_count', '0');
        }, 1500);
      }
    } else {
      streakCount = 0;
      localStorage.setItem('dice_streak_count', '0');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ—Å–∫–æ–≤
    updateRollHistory(randomRoll1, randomRoll2, totalResult);

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    currentAnimations.forEach(animation => animation.destroy());
    currentAnimations = [];

    // –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫—É–±–∏–∫–æ–≤
    const animation1 = lottie.loadAnimation({
      container: dice1,
      renderer: "svg",
      loop: false,
      autoplay: true,
      path: `dice${randomRoll1}.json`
    });

    const animation2 = lottie.loadAnimation({
      container: dice2,
      renderer: "svg",
      loop: false,
      autoplay: true,
      path: `dice${randomRoll2}.json`
    });

    currentAnimations.push(animation1, animation2);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    let completedAnimations = 0;
    const onComplete = () => {
      completedAnimations++;
      if (completedAnimations === 2) {
        resultDiv.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${totalResult}`;
        resultDiv.style.display = "block"; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
          rollButton.style.display = "block";
        }, 800);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π
        taskManager.updateTaskProgress([randomRoll1, randomRoll2]);
      }
    };

    animation1.addEventListener("complete", onComplete);
    animation2.addEventListener("complete", onComplete);
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
  renderRollHistory();
  updateRollCounter();

  // –°–æ–∑–¥–∞–µ–º UI –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∑–∞–¥–∞–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
  const createAdditionalUI = () => {
    const minPageContentHeight = document.querySelector('.min-page-content-height');
    if (!minPageContentHeight) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –Ω–∞—à UI
    if (document.getElementById('daily-tasks-container')) return;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—á–∫–æ–≤
    const pointsContainer = document.createElement('div');
    pointsContainer.className = 'points-container';
    pointsContainer.innerHTML = `
      <div class="points-icon">üíé</div>
      <div class="points-info">
        <div class="points-title">–û—á–∫–∏</div>
      </div>
      <div class="points-value" id="points-display">${taskManager.points}</div>
    `;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    const dailyBonusContainer = document.createElement('div');
    dailyBonusContainer.className = 'daily-section';
    dailyBonusContainer.innerHTML = `
      <div class="section-header">
        <div class="section-title">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</div>
      </div>
      <div class="daily-bonus">
        <div class="bonus-icon">üéÅ</div>
        <div class="bonus-info">
          <div class="bonus-title">–ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</div>
          <div class="bonus-description">–°–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤: ${taskManager.streak} –¥–Ω.</div>
        </div>
        <button id="daily-bonus-button" class="daily-bonus-button ${taskManager.dailyBonus ? 'claimed' : ''}">
          ${taskManager.dailyBonus ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ü–æ–ª—É—á–∏—Ç—å'}
        </button>
      </div>
    `;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const tasksContainer = document.createElement('div');
    tasksContainer.className = 'daily-section';
    tasksContainer.id = 'daily-tasks-container';
    tasksContainer.innerHTML = `
      <div class="section-header">
        <div class="section-title">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</div>
        <div id="tasks-completion-badge" class="tasks-completion-badge" style="display:none">‚úì</div>
      </div>
      <div id="daily-tasks-list"></div>
    `;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
    const statsContainer = document.createElement('div');
    statsContainer.className = 'daily-section';
    statsContainer.innerHTML = `
      <div class="section-header">
        <div class="section-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
      </div>
      <div class="stats-grid">
        <div class="stats-item">
          <div class="stats-value" id="roll-counter">${rollCount}</div>
          <div class="stats-label">–í—Å–µ–≥–æ –±—Ä–æ—Å–∫–æ–≤</div>
        </div>
        <div class="stats-item">
          <div class="stats-value">${Math.floor((rollCount * 8) / 100)}</div>
          <div class="stats-label">–£—Ä–æ–≤–µ–Ω—å</div>
        </div>
      </div>
      <div class="section-header" style="margin-top: 16px;">
        <div class="section-title">–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤</div>
      </div>
      <div id="roll-history-list" class="history-list"></div>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å –∏–≥—Ä–æ–π
    const appContainer = document.getElementById('app');
    if (appContainer) {
      minPageContentHeight.insertBefore(pointsContainer, appContainer);
      minPageContentHeight.insertBefore(dailyBonusContainer, appContainer);
      minPageContentHeight.insertBefore(tasksContainer, appContainer);
      minPageContentHeight.appendChild(statsContainer);
    } else {
      minPageContentHeight.appendChild(pointsContainer);
      minPageContentHeight.appendChild(dailyBonusContainer);
      minPageContentHeight.appendChild(tasksContainer);
      minPageContentHeight.appendChild(statsContainer);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const styleElement = document.createElement('style');
    styleElement.textContent = `
      .stats-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
      }
      
      .stats-item {
        background: var(--tg-theme-secondary-bg-color);
        border-radius: 10px;
        padding: 12px;
        text-align: center;
      }
      
      .stats-value {
        font-size: 18px;
        font-weight: 590;
        color: var(--tg-theme-text-color);
        margin-bottom: 4px;
      }
      
      .stats-label {
        font-size: 13px;
        color: var(--tg-theme-hint-color);
      }
      
      .history-list {
        margin-top: 8px;
      }
      
      .history-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }
      
      .history-item:last-child {
        border-bottom: none;
      }
      
      .dice-value {
        font-weight: 510;
      }
      
      .dice-sum {
        font-weight: 590;
        color: var(--tg-theme-accent-text-color);
      }
      
      .history-time {
        font-size: 13px;
        color: var(--tg-theme-hint-color);
      }
      
      .history-empty {
        text-align: center;
        padding: 16px;
        color: var(--tg-theme-hint-color);
        font-size: 14px;
      }
      
      #app {
        margin-top: 20px;
        margin-bottom: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      
      .center-btn {
        background: var(--tg-theme-button-color);
        color: var(--tg-theme-button-text-color);
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-size: 16px;
        font-weight: 510;
        cursor: pointer;
        margin: 20px 0;
      }
      
      #dice-container {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
      }
      
      .dice {
        width: 100px;
        height: 100px;
      }
      
      #result {
        font-size: 18px;
        font-weight: 590;
        color: var(--tg-theme-text-color);
        margin-bottom: 20px;
      }
    `;
    
    document.head.appendChild(styleElement);
    
    // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –∏ –±–æ–Ω—É—Å–Ω—É—é –∫–Ω–æ–ø–∫—É
    taskManager.renderTasks();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å–∞
    const bonusButton = document.getElementById('daily-bonus-button');
    if (bonusButton && !taskManager.dailyBonus) {
      bonusButton.addEventListener('click', () => {
        const result = taskManager.claimDailyBonus();
        if (result) {
          bonusButton.classList.add('claimed');
          bonusButton.textContent = '–ü–æ–ª—É—á–µ–Ω–æ';
          bonusButton.disabled = true;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
          const notification = document.createElement('div');
          notification.className = 'bonus-notification fadeInDown';
          notification.innerHTML = `
            <div class="notification-content">
              <div class="notification-icon">üéÅ</div>
              <div class="notification-text">
                <div class="notification-title">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!</div>
                <div class="notification-description">–°–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤: ${result.streak} –¥–Ω.</div>
              </div>
              <div class="notification-reward">+${result.bonus}</div>
            </div>
          `;
          
          document.body.appendChild(notification);
          
          setTimeout(() => {
            notification.classList.replace('fadeInDown', 'fadeInUp');
            setTimeout(() => notification.remove(), 200);
          }, 3000);
        }
      });
    }
    
    renderRollHistory();
  };
  
  // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π UI
  createAdditionalUI();
});
