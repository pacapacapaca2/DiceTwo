document.addEventListener("DOMContentLoaded", () => {
  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
  const rollButton = document.getElementById("roll-button");
  const resultDiv = document.getElementById("result");
  const diceContainer = document.getElementById("dice-container");
  const dice1 = document.getElementById("dice1");
  const dice2 = document.getElementById("dice2");
  const animationContainer = document.getElementById("animation-container");
  const loader = document.querySelector('.loader');
  const progressFill = document.querySelector('.progress-fill');
  const progressValue = document.querySelector('.progress-value');
  const statValues = document.querySelectorAll('.stat-value');

  // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (loader) {
    loader.style.display = 'none';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  if (!rollButton || !resultDiv || !diceContainer || !dice1 || !dice2) {
    console.error("One or more DOM elements not found.");
    return;
  }

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const initialGameState = {
    rollCount: 0,
    bestScore: 0,
    stars: 0,
    level: 1,
    xp: 0, // –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    bonusRolls: 0, // –±–æ–Ω—É—Å–Ω—ã–µ –±—Ä–æ—Å–∫–∏
    todayRolls: 0, // —Å–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ —Å–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è
    maxDailyRolls: 999, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤ (—É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
    history: [], // –∏—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–æ—Ä–∏–∏
    currentLocation: "–¢—É–º–∞–Ω–Ω—ã–µ —Ä–∞–≤–Ω–∏–Ω—ã",
    currentNode: 0, // 0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    storyProgress: {
      "–¢—É–º–∞–Ω–Ω—ã–µ —Ä–∞–≤–Ω–∏–Ω—ã": [
        { completed: false, name: "–î–µ—Ä–µ–≤–Ω—è", type: "normal" },
        { completed: false, name: "–õ–µ—Å", type: "normal" },
        { completed: false, name: "–ü–µ—â–µ—Ä–∞", type: "normal" },
        { completed: false, name: "–†—É–∏–Ω—ã", type: "normal" },
        { completed: false, name: "–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω", type: "boss" }
      ],
      "–û–≥–Ω–µ–Ω–Ω—ã–µ –≥–æ—Ä—ã": [
        { completed: false, name: "–ü–µ—Ä–µ–≤–∞–ª", type: "normal" },
        { completed: false, name: "–ü–µ—â–µ—Ä—ã", type: "normal" },
        { completed: false, name: "–í—É–ª–∫–∞–Ω", type: "normal" },
        { completed: false, name: "–ö—É–∑–Ω–∏—Ü–∞", type: "normal" },
        { completed: false, name: "–û–≥–Ω–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å", type: "boss" }
      ],
      "–õ–µ–¥—è–Ω–∞—è –ø—É—Å—Ç–æ—à—å": [
        { completed: false, name: "–ê–≤–∞–Ω–ø–æ—Å—Ç", type: "normal" },
        { completed: false, name: "–ó–∞–º–µ—Ä–∑—à–µ–µ –æ–∑–µ—Ä–æ", type: "normal" },
        { completed: false, name: "–õ–µ–¥–Ω–∏–∫", type: "normal" },
        { completed: false, name: "–°–Ω–µ–∂–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å", type: "normal" },
        { completed: false, name: "–õ–µ–¥—è–Ω–æ–π –≥–∏–≥–∞–Ω—Ç", type: "boss" }
      ]
    },
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Å—Å–∏—è—Ö
    missions: {
      "–î–µ—Ä–µ–≤–Ω—è": {
        title: "–°–ø–∞—Å–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏",
        description: "–ü–æ–º–æ–≥–∏ –∂–∏—Ç–µ–ª—è–º –¥–µ—Ä–µ–≤–Ω–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –Ω–∞—à–µ—Å—Ç–≤–∏–µ–º –∫—Ä—ã—Å. –ë—Ä–æ—Å—å –∫—É–±–∏–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–≥–Ω–∞—Ç—å –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π!",
        difficulty: 1,
        targetRolls: 2,
        requiredValue: 5,
        rewards: {
          xp: 10,
          stars: 5,
          crystals: 1,
          artifact: "–°–≤–∏—Ç–æ–∫ –º—É–¥—Ä–æ—Å—Ç–∏"
        }
      },
      "–õ–µ—Å": {
        title: "–¢–∞–π–Ω—ã –ª–µ—Å–∞",
        description: "–ò—Å—Å–ª–µ–¥—É–π –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –ª–µ—Å –∏ –Ω–∞–π–¥–∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—É—é —Ç—Ä–æ–ø—É. –ë—Ä–æ—Å–∞–π –∫—É–±–∏–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è!",
        difficulty: 1,
        targetRolls: 3,
        requiredValue: 6,
        rewards: {
          xp: 15,
          stars: 10,
          crystals: 2,
          artifact: "–©–∏—Ç –≥–µ—Ä–æ—è"
        }
      },
      "–ü–µ—â–µ—Ä–∞": {
        title: "–ó–∞–≥–∞–¥–∫–∞ –ø–µ—â–µ—Ä—ã",
        description: "–ò—Å—Å–ª–µ–¥—É–π —Ç–µ–º–Ω—É—é –ø–µ—â–µ—Ä—É –∏ –Ω–∞–π–¥–∏ –¥—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç. –ë—Ä–æ—Å–∞–π –∫—É–±–∏–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è!",
        difficulty: 2,
        targetRolls: 3,
        requiredValue: 7,
        rewards: {
          xp: 20,
          stars: 15,
          crystals: 3,
          artifact: "–ê–º—É–ª–µ—Ç —Å–∏–ª—ã"
        }
      },
      "–†—É–∏–Ω—ã": {
        title: "–¢–∞–π–Ω—ã —Ä—É–∏–Ω",
        description: "–ò—Å—Å–ª–µ–¥—É–π –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã –∏ —Ä–∞–∑–≥–∞–¥–∞–π –∏—Ö —Ç–∞–π–Ω—ã. –ß—Ç–æ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –≥–ª—É–±–∏–Ω–µ –≤–µ–∫–æ–≤?",
        difficulty: 2,
        targetRolls: 4,
        requiredValue: 8,
        rewards: {
          xp: 30,
          stars: 20,
          crystals: 5,
          artifact: "–ö–ª—é—á –æ—Ç —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã"
        }
      },
      "–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω": {
        title: "–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω",
        description: "–°—Ä–∞–∑–∏—Å—å —Å –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥—Ä–∞–∫–æ–Ω–æ–º, —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–º –¥—Ä–µ–≤–Ω–∏—Ö —Å–æ–∫—Ä–æ–≤–∏—â!",
        difficulty: 3,
        targetRolls: 5,
        requiredValue: 9,
        rewards: {
          xp: 50,
          stars: 100,
          crystals: 10,
          artifact: "–î—Ä–µ–≤–Ω–∏–π –º–µ—á"
        }
      }
    },
    
    // –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–∏—Å—Å–∏—è
    currentMission: null,
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö
    artifacts: [
      { id: "sword", name: "–î—Ä–µ–≤–Ω–∏–π –º–µ—á", icon: "üó°Ô∏è", collected: false, description: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ, –≤—ã–∫–æ–≤–∞–Ω–Ω–æ–µ –≤ –Ω–µ–∑–∞–ø–∞–º—è—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞" },
      { id: "shield", name: "–©–∏—Ç –≥–µ—Ä–æ—è", icon: "üõ°Ô∏è", collected: false, description: "–ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –∞—Ç–∞–∫" },
      { id: "scroll", name: "–°–≤–∏—Ç–æ–∫ –º—É–¥—Ä–æ—Å—Ç–∏", icon: "üìú", collected: false, description: "–°–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Ç–∞–π–Ω—ã" },
      { id: "amulet", name: "–ê–º—É–ª–µ—Ç —Å–∏–ª—ã", icon: "üîÆ", collected: false, description: "–î–∞—Ä—É–µ—Ç –Ω–æ—Å–∏—Ç–µ–ª—é –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é –º–∞–≥–∏—á–µ—Å–∫—É—é –º–æ—â—å" },
      { id: "potion", name: "–ó–µ–ª—å–µ –∏—Å—Ü–µ–ª–µ–Ω–∏—è", icon: "üß™", collected: false, description: "–°–ø–æ—Å–æ–±–Ω–æ –∏–∑–ª–µ—á–∏—Ç—å –ª—é–±—ã–µ —Ä–∞–Ω—ã –∏ –±–æ–ª–µ–∑–Ω–∏" },
      { id: "key", name: "–ö–ª—é—á –æ—Ç —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã", icon: "üîë", collected: false, description: "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä—å –∫ –Ω–µ—Å–º–µ—Ç–Ω—ã–º –±–æ–≥–∞—Ç—Å—Ç–≤–∞–º" },
      { id: "crown", name: "–ö–æ—Ä–æ–Ω–∞ –≤–ª–∞—Å—Ç–∏", icon: "üëë", collected: false, description: "–°–∏–º–≤–æ–ª –º–æ–≥—É—â–µ—Å—Ç–≤–∞ –∏ –≤–ª–∞—Å—Ç–∏ –Ω–∞–¥ –∑–µ–º–ª—è–º–∏" },
      { id: "gem", name: "–ö–∞–º–µ–Ω—å –¥—É—à", icon: "üíé", collected: false, description: "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π" },
      { id: "book", name: "–ö–Ω–∏–≥–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π", icon: "üìï", collected: false, description: "–°–æ–¥–µ—Ä–∂–∏—Ç –º–æ—â–Ω—ã–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã" },
      { id: "staff", name: "–ü–æ—Å–æ—Ö –º–∞–≥–∞", icon: "ü™Ñ", collected: false, description: "–£—Å–∏–ª–∏–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞" },
      { id: "ring", name: "–ö–æ–ª—å—Ü–æ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏", icon: "üíç", collected: false, description: "–î–µ–ª–∞–µ—Ç –Ω–æ—Å–∏—Ç–µ–ª—è –Ω–µ–≤–∏–¥–∏–º—ã–º –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö" },
      { id: "orb", name: "–°—Ñ–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", icon: "üî¥", collected: false, description: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ö–∏–π–Ω—ã–µ —Å–∏–ª—ã" }
    ]
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ
  let gameState = loadGameState() || {...initialGameState};
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º–∏—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  initCurrentMission();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ localStorage
  function saveGameState() {
    localStorage.setItem('diceAdventure_gameState', JSON.stringify(gameState));
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏–∑ localStorage
  function loadGameState() {
    const savedState = localStorage.getItem('diceAdventure_gameState');
    return savedState ? JSON.parse(savedState) : null;
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø–æ–ª–Ω–æ–≥–æ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ)
  function resetGameState(fullReset = false) {
    if (fullReset) {
      gameState = {...initialGameState};
    } else {
      // –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const artifacts = [...gameState.artifacts];
      const stars = gameState.stars;
      const rollCount = gameState.rollCount;
      const bestScore = gameState.bestScore;
      
      gameState = {...initialGameState};
      gameState.artifacts = artifacts;
      gameState.stars = stars;
      gameState.rollCount = rollCount;
      gameState.bestScore = bestScore;
    }
    
    saveGameState();
    initCurrentMission();
    updateUI();
    updateMapUI();
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –º–∏—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  function initCurrentMission() {
    const location = gameState.currentLocation;
    const nodeIndex = gameState.currentNode;
    
    if (gameState.storyProgress[location] && gameState.storyProgress[location][nodeIndex]) {
      const nodeName = gameState.storyProgress[location][nodeIndex].name;
      const missionTemplate = gameState.missions[nodeName];
      
      if (missionTemplate) {
        gameState.currentMission = {
          ...missionTemplate,
          successfulRolls: 0
        };
      }
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –º–∏—Å—Å–∏–π
  function updateMapUI() {
    const mapContainer = document.querySelector('.map-path');
    if (!mapContainer) return;
    
    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    mapContainer.innerHTML = '';
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –∏ —É–∑–ª—ã
    const location = gameState.currentLocation;
    const nodeIndex = gameState.currentNode;
    const nodes = gameState.storyProgress[location];
    
    if (!nodes) return;
    
    // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã
    nodes.forEach((node, index) => {
      const nodeElement = document.createElement('div');
      nodeElement.className = `map-node ${node.completed ? 'completed' : ''} ${index === nodeIndex ? 'current' : ''} ${index > nodeIndex ? 'locked' : ''} ${node.type === 'boss' ? 'boss' : ''}`;
      
      const nodeIcon = document.createElement('div');
      nodeIcon.className = 'node-icon';
      
      if (node.completed) {
        nodeIcon.textContent = '‚úì';
      } else if (index === nodeIndex) {
        nodeIcon.textContent = '!';
      } else if (node.type === 'boss') {
        nodeIcon.textContent = '‚öîÔ∏è';
      } else {
        nodeIcon.textContent = '?';
      }
      
      const nodeLabel = document.createElement('div');
      nodeLabel.className = 'node-label';
      nodeLabel.textContent = node.name;
      
      nodeElement.appendChild(nodeIcon);
      nodeElement.appendChild(nodeLabel);
      mapContainer.appendChild(nodeElement);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–∫–∞—Ü–∏–∏
    const locationTitle = document.querySelector('.location-title');
    if (locationTitle) {
      locationTitle.textContent = location;
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏—Å—Å–∏–∏
  function updateMissionUI() {
    const mission = gameState.currentMission;
    if (!mission) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–∏—Å—Å–∏–∏
    const missionTitle = document.querySelector('.mission-title');
    if (missionTitle) {
      missionTitle.textContent = mission.title;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏
    const missionDescription = document.querySelector('.mission-description');
    if (missionDescription) {
      missionDescription.textContent = mission.description;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    const missionDifficulty = document.querySelector('.mission-difficulty');
    if (missionDifficulty) {
      let stars = '';
      for (let i = 0; i < 3; i++) {
        stars += i < mission.difficulty ? '‚òÖ' : '‚òÜ';
      }
      missionDifficulty.textContent = stars;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    const rewardItems = document.querySelectorAll('.reward-item');
    if (rewardItems.length >= 3) {
      // XP
      const xpIcon = rewardItems[0].querySelector('.reward-icon');
      const xpValue = rewardItems[0].querySelector('.reward-value');
      if (xpIcon && xpValue) {
        xpIcon.textContent = 'üèÜ';
        xpValue.textContent = `+${mission.rewards.xp} –æ–ø—ã—Ç–∞`;
      }
      
      // –ó–≤–µ–∑–¥—ã
      const starsIcon = rewardItems[1].querySelector('.reward-icon');
      const starsValue = rewardItems[1].querySelector('.reward-value');
      if (starsIcon && starsValue) {
        starsIcon.textContent = 'üíé';
        starsValue.textContent = `√ó${mission.rewards.crystals} –∫—Ä–∏—Å—Ç–∞–ª–ª–∞`;
      }
      
      // –ê—Ä—Ç–µ—Ñ–∞–∫—Ç
      const artifactIcon = rewardItems[2].querySelector('.reward-icon');
      const artifactValue = rewardItems[2].querySelector('.reward-value');
      if (artifactIcon && artifactValue) {
        const artifact = gameState.artifacts.find(a => a.name === mission.rewards.artifact);
        if (artifact) {
          artifactIcon.textContent = artifact.icon;
          artifactValue.textContent = artifact.name;
        }
      }
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
  function updateArtifactsUI() {
    const collectionContainer = document.querySelector('.artifacts-container');
    if (!collectionContainer) return;
    
    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    collectionContainer.innerHTML = '';
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö
    const collectedCount = gameState.artifacts.filter(a => a.collected).length;
    const totalCount = gameState.artifacts.length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    const collectionCount = document.querySelector('.collection-count');
    if (collectionCount) {
      collectionCount.textContent = `${collectedCount}/${totalCount}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    const collectedArtifacts = gameState.artifacts.filter(a => a.collected);
    collectedArtifacts.forEach(artifact => {
      const artifactElement = document.createElement('div');
      artifactElement.className = 'artifact-item collected';
      
      const artifactIcon = document.createElement('div');
      artifactIcon.className = 'artifact-icon';
      artifactIcon.textContent = artifact.icon;
      
      artifactElement.appendChild(artifactIcon);
      collectionContainer.appendChild(artifactElement);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    for (let i = 0; i < 5 && collectedCount + i < totalCount; i++) {
      const artifactElement = document.createElement('div');
      artifactElement.className = 'artifact-item locked';
      
      const artifactIcon = document.createElement('div');
      artifactIcon.className = 'artifact-icon';
      artifactIcon.textContent = '?';
      
      artifactElement.appendChild(artifactIcon);
      collectionContainer.appendChild(artifactElement);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—á–∫–æ–≤
  function createPointsAnimation(points) {
    const pointsEl = document.createElement("div");
    pointsEl.className = "points-animation";
    pointsEl.textContent = points > 0 ? `+${points}` : points;
    
    // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const x = Math.random() * 80 + 10; // –æ—Ç 10% –¥–æ 90% —à–∏—Ä–∏–Ω—ã
    const y = Math.random() * 30 + 35; // –æ—Ç 35% –¥–æ 65% –≤—ã—Å–æ—Ç—ã
    
    pointsEl.style.left = `${x}%`;
    pointsEl.style.top = `${y}%`;
    
    animationContainer.appendChild(pointsEl);
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      pointsEl.remove();
    }, 1500);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  function updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (progressValue) progressValue.textContent = gameState.level;
    if (progressFill) progressFill.style.width = `${gameState.xp}%`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (statValues && statValues.length >= 3) {
      statValues[0].textContent = gameState.rollCount;
      statValues[1].textContent = gameState.bestScore;
      statValues[2].textContent = `‚òÖ ${gameState.stars}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±—Ä–æ—Å–∫–∞
    if (gameState.currentMission) {
      if (gameState.currentMission.successfulRolls < gameState.currentMission.targetRolls) {
        const remainingRolls = gameState.currentMission.targetRolls - gameState.currentMission.successfulRolls;
        rollButton.textContent = `–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏ (${remainingRolls})`;
      } else {
        rollButton.textContent = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏—Å—Å–∏—é";
      }
    } else {
      rollButton.textContent = "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏";
    }
    
    rollButton.disabled = false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateMapUI();
    updateMissionUI();
    updateArtifactsUI();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saveGameState();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–æ—Å–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
  function evaluateRoll(roll1, roll2) {
    const total = roll1 + roll2;
    let points = total;
    let message = `–í—ã–ø–∞–ª–æ: ${total}`;
    let missionSuccess = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö –º–∏—Å—Å–∏–∏
    if (gameState.currentMission && total >= gameState.currentMission.requiredValue) {
      missionSuccess = true;
      gameState.currentMission.successfulRolls++;
      message += ` (—É—Å–ø–µ—Ö! ‚úÖ)`;
    } else if (gameState.currentMission) {
      message += ` (–Ω–µ—É–¥–∞—á–∞ ‚ùå)`;
    }
    
    // –î–≤–æ–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–∞—é—Ç –±–æ–Ω—É—Å
    if (roll1 === roll2) {
      points = total * 2;
      message += ` (–¥—É–±–ª—å! x2)`;
      createPointsAnimation(points);
    } else {
      createPointsAnimation(points);
    }
    
    // –û—Å–æ–±—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    if (total === 7) {
      points += 3;
      message += " (+3 –∑–∞ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ)";
    } else if (total === 11) {
      points += 5;
      message += " (+5 –∑–∞ –º–æ—â–Ω—ã–π –±—Ä–æ—Å–æ–∫)";
    } else if (total === 12) {
      points += 7;
      message += " (+7 –∑–∞ –º–∞–∫—Å–∏–º—É–º)";
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    gameState.todayRolls++;
    gameState.rollCount++;
    gameState.stars += points;
    
    if (total > gameState.bestScore) {
      gameState.bestScore = total;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º XP
    gameState.xp += points * 2;
    if (gameState.xp >= 100) {
      gameState.level++;
      gameState.xp = gameState.xp - 100;
      message += " (–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!)";
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    gameState.history.push({
      roll1: roll1,
      roll2: roll2,
      total: total,
      points: points,
      timestamp: new Date(),
      missionSuccess: missionSuccess
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏
    if (gameState.currentMission && gameState.currentMission.successfulRolls >= gameState.currentMission.targetRolls) {
      message += " (–º–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!)";
      rollButton.textContent = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏—Å—Å–∏—é";
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    saveGameState();
    
    return { points, message, missionSuccess };
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
  function completeMission() {
    // –û—Ç–º–µ—á–∞–µ–º —É–∑–µ–ª –∫–∞—Ä—Ç—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    const currentLocation = gameState.currentLocation;
    const currentNodeIndex = gameState.currentNode;
    
    if (gameState.storyProgress[currentLocation] && 
        gameState.storyProgress[currentLocation][currentNodeIndex]) {
      gameState.storyProgress[currentLocation][currentNodeIndex].completed = true;
    }
    
    // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    const rewards = gameState.currentMission.rewards;
    gameState.xp += rewards.xp;
    gameState.stars += rewards.stars;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    if (gameState.xp >= 100) {
      gameState.level++;
      gameState.xp = gameState.xp - 100;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
    const artifactToAdd = rewards.artifact;
    if (artifactToAdd) {
      const artifactIndex = gameState.artifacts.findIndex(a => a.name === artifactToAdd);
      if (artifactIndex !== -1) {
        gameState.artifacts[artifactIndex].collected = true;
      }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    resultDiv.textContent = `–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ: ${rewards.xp} XP, ${rewards.stars} –∑–≤–µ–∑–¥, ${rewards.crystals} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤, ${rewards.artifact}`;
    resultDiv.style.display = "block";
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª
    if (currentNodeIndex < gameState.storyProgress[currentLocation].length - 1) {
      gameState.currentNode++;
      initCurrentMission();
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
      const locations = Object.keys(gameState.storyProgress);
      const currentLocationIndex = locations.indexOf(currentLocation);
      
      if (currentLocationIndex < locations.length - 1) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
        gameState.currentLocation = locations[currentLocationIndex + 1];
        gameState.currentNode = 0;
        initCurrentMission();
        resultDiv.textContent += ` –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è: ${gameState.currentLocation}!`;
      } else {
        // –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        gameState.currentMission = null;
        resultDiv.textContent += " –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏!";
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    saveGameState();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    setTimeout(() => {
      updateUI();
    }, 3000);
  }

  // –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  let currentAnimations = []; 

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞
  rollButton.addEventListener("click", () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∏—Å—Å–∏—é
    if (gameState.currentMission && gameState.currentMission.successfulRolls >= gameState.currentMission.targetRolls) {
      completeMission();
      return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    rollButton.disabled = true;
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–±–∏–∫–∏
    resultDiv.style.display = "none";
    diceContainer.style.display = "flex";

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –æ–±–æ–∏—Ö –∫—É–±–∏–∫–æ–≤
    const randomRoll1 = Math.floor(Math.random() * 6) + 1;
    const randomRoll2 = Math.floor(Math.random() * 6) + 1;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    currentAnimations.forEach(animation => animation.destroy());
    currentAnimations = [];

    // –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫—É–±–∏–∫–æ–≤
    const animation1 = lottie.loadAnimation({
      container: dice1,
      renderer: "svg",
      loop: false,
      autoplay: true,
      path: `dice${randomRoll1}.json`
    });

    const animation2 = lottie.loadAnimation({
      container: dice2,
      renderer: "svg",
      loop: false,
      autoplay: true,
      path: `dice${randomRoll2}.json`
    });

    currentAnimations.push(animation1, animation2);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
    let completedAnimations = 0;
    const onComplete = () => {
      completedAnimations++;
      if (completedAnimations === 2) {
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –±—Ä–æ—Å–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const { points, message, missionSuccess } = evaluateRoll(randomRoll1, randomRoll2);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUI();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        resultDiv.textContent = message;
        resultDiv.style.display = "block";
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—Ö–∞ –º–∏—Å—Å–∏–∏
        if (missionSuccess) {
          resultDiv.classList.add("success-result");
          resultDiv.classList.remove("failure-result");
        } else if (gameState.currentMission) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –º–∏—Å—Å–∏–∏
          resultDiv.classList.add("failure-result");
          resultDiv.classList.remove("success-result");
        }
        
        // –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —Å–∫—Ä—ã–≤–∞–µ–º –∫—É–±–∏–∫–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–æ—Å–∫–∞
        setTimeout(() => {
          diceContainer.style.display = "none";
          rollButton.disabled = false;
          
          // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
          setTimeout(() => {
            resultDiv.classList.remove("success-result", "failure-result");
          }, 1000);
        }, 2000);
      }
    };

    animation1.addEventListener("complete", onComplete);
    animation2.addEventListener("complete", onComplete);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  const resetButton = document.createElement('button');
  resetButton.id = 'reset-button';
  resetButton.className = 'secondary-button';
  resetButton.textContent = '–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å';
  resetButton.onclick = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      resetGameState(false);
    }
  };
  
  const gameContainer = document.getElementById('game-container');
  if (gameContainer) {
    gameContainer.appendChild(resetButton);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  updateUI();
});
