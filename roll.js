// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import { generateDailyChallenge, checkChallengeCompletion, calculateStreakBonus } from './challenges.js';
import { getUserProfile, updateLoginStreak, addLuckPoints, getShopItems } from './currency.js';
import { createChallengeElement, createProfilePanel, createShopPanel, showNotification, showRewardModal } from './ui.js';

document.addEventListener("DOMContentLoaded", () => {
  const rollButton = document.getElementById("roll-button");
  const resultDiv = document.getElementById("result");
  const diceContainer = document.getElementById("dice-container");
  const dice1 = document.getElementById("dice1");
  const dice2 = document.getElementById("dice2");
  const gameContainer = document.getElementById("app");

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const gameInterface = document.createElement('div');
  gameInterface.id = 'game-interface';
  gameInterface.className = 'game-interface';
  gameContainer.prepend(gameInterface);

  if (!rollButton || !resultDiv || !diceContainer || !dice1 || !dice2 || !gameContainer) {
    console.error("One or more DOM elements not found.");
    return;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
  const styleSheet = document.createElement('link');
  styleSheet.rel = 'stylesheet';
  styleSheet.href = 'styles/game.css';
  document.head.appendChild(styleSheet);

  let currentAnimations = []; // –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  let currentDiceValues = [0, 0]; // –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  initGame();

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
  function initGame() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
    const streakDays = updateLoginStreak();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProfile = getUserProfile();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
    let todaysChallenge = getTodaysChallenge();
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã
    renderGameInterface(userProfile, todaysChallenge, streakDays);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    addNavigationButtons();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤
    if (streakDays > 1) {
      showNotification(`–í—ã –∑–∞—Ö–æ–¥–∏—Ç–µ ${streakDays} ${getDayForm(streakDays)} –ø–æ–¥—Ä—è–¥! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`, 'info');
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  function getTodaysChallenge() {
    const today = new Date().toISOString().split('T')[0];
    let challenge;
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
      const savedChallenge = localStorage.getItem(`challenge-${today}`);
      if (savedChallenge) {
        challenge = JSON.parse(savedChallenge);
      } else {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
        challenge = generateDailyChallenge();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
        localStorage.setItem(`challenge-${today}`, JSON.stringify(challenge));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è:', error);
      challenge = generateDailyChallenge();
    }
    
    return challenge;
  }

  // –†–µ–Ω–¥–µ—Ä–∏–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  function renderGameInterface(profile, challenge, streakDays) {
    gameInterface.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
    const profilePanel = createProfilePanel(profile);
    gameInterface.appendChild(profilePanel);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    const challengeElement = createChallengeElement(challenge, streakDays);
    gameInterface.appendChild(challengeElement);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    const shopButton = document.createElement('button');
    shopButton.className = 'secondary-button shop-button';
    shopButton.textContent = 'üõí –ú–∞–≥–∞–∑–∏–Ω';
    shopButton.addEventListener('click', showShop);
    gameInterface.appendChild(shopButton);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
  function showShop() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    const shopItems = getShopItems();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞–≥–∞–∑–∏–Ω–∞
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content shop-modal';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
    const shopHeader = document.createElement('div');
    shopHeader.innerHTML = '<h2>–ú–∞–≥–∞–∑–∏–Ω</h2>';
    modalContent.appendChild(shopHeader);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞
    const shopPanel = createShopPanel(shopItems);
    modalContent.appendChild(shopPanel);
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButton = document.createElement('button');
    closeButton.className = 'close-modal-button';
    closeButton.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
    closeButton.addEventListener('click', () => {
      modalOverlay.classList.remove('show');
      setTimeout(() => {
        modalOverlay.remove();
      }, 300);
    });
    modalContent.appendChild(closeButton);
    
    modalOverlay.appendChild(modalContent);
    document.body.appendChild(modalOverlay);
    
    setTimeout(() => {
      modalOverlay.classList.add('show');
    }, 10);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏
    setupShopEventListeners(modalContent);
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
  function setupShopEventListeners(shopElement) {
    const buyButtons = shopElement.querySelectorAll('.buy-button');
    
    buyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const itemId = button.dataset.id;
        if (itemId) {
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
          import('./currency.js').then(module => {
            const result = module.purchaseItem(itemId);
            
            if (result.success) {
              showNotification(result.message, 'success');
              // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
              showShop();
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
              const userProfile = getUserProfile();
              const todaysChallenge = getTodaysChallenge();
              const streakDays = userProfile.streakDays;
              renderGameInterface(userProfile, todaysChallenge, streakDays);
            } else {
              showNotification(result.message, 'error');
            }
          });
        }
      });
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  function addNavigationButtons() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–≥—Ä–µ
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
  function getDayForm(days) {
    if (days % 10 === 1 && days % 100 !== 11) {
      return '–¥–µ–Ω—å';
    } else if ([2, 3, 4].includes(days % 10) && ![12, 13, 14].includes(days % 100)) {
      return '–¥–Ω—è';
    } else {
      return '–¥–Ω–µ–π';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±—Ä–æ—Å–∫–∞
  rollButton.addEventListener("click", () => {
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Roll
    rollButton.style.display = "none";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∫—É–±–∏–∫–æ–≤
    diceContainer.style.display = "flex"; // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    resultDiv.style.display = "none";    // –ü—Ä—è—á–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –æ–±–æ–∏—Ö –∫—É–±–∏–∫–æ–≤
    const randomRoll1 = Math.floor(Math.random() * 6) + 1;
    const randomRoll2 = Math.floor(Math.random() * 6) + 1;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤
    currentDiceValues = [randomRoll1, randomRoll2];

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    currentAnimations.forEach(animation => animation.destroy());
    currentAnimations = [];

    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –∫—É–±–∏–∫–æ–≤ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π)
    const profile = getUserProfile();
    let diceStylePath = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫—É–±–∏–∫–æ–≤
    if (profile.unlockedItems.includes('dice_style_gold')) {
      diceStylePath = 'gold_';
    } else if (profile.unlockedItems.includes('dice_style_neon')) {
      diceStylePath = 'neon_';
    } else if (profile.unlockedItems.includes('dice_style_crystal')) {
      diceStylePath = 'crystal_';
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
    const dicePath1 = diceStylePath ? `styles/${diceStylePath}dice${randomRoll1}.json` : `dice${randomRoll1}.json`;
    const dicePath2 = diceStylePath ? `styles/${diceStylePath}dice${randomRoll2}.json` : `dice${randomRoll2}.json`;

    // –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫—É–±–∏–∫–æ–≤
    const animation1 = lottie.loadAnimation({
      container: dice1,
      renderer: "svg",
      loop: false,
      autoplay: true,
      path: dicePath1
    });

    const animation2 = lottie.loadAnimation({
      container: dice2,
      renderer: "svg",
      loop: false,
      autoplay: true,
      path: dicePath2
    });

    currentAnimations.push(animation1, animation2);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    let completedAnimations = 0;
    const onComplete = () => {
      completedAnimations++;
      if (completedAnimations === 2) {
        const totalResult = randomRoll1 + randomRoll2;
        resultDiv.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${totalResult}`;
        resultDiv.style.display = "block"; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updateUserStats(randomRoll1, randomRoll2);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
        checkChallengeCompletion();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Roll —Å–Ω–æ–≤–∞
        setTimeout(() => {
          rollButton.style.display = "block";
        }, 1500);
      }
    };

    animation1.addEventListener("complete", onComplete);
    animation2.addEventListener("complete", onComplete);
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  function updateUserStats(dice1Value, dice2Value) {
    const profile = getUserProfile();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–æ–≤
    profile.totalRolls++;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    localStorage.setItem('diceGameUserProfile', JSON.stringify(profile));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const userProfile = getUserProfile();
    const todaysChallenge = getTodaysChallenge();
    const streakDays = userProfile.streakDays;
    renderGameInterface(userProfile, todaysChallenge, streakDays);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
  function checkChallengeCompletion() {
    const challenge = getTodaysChallenge();
    
    // –ï—Å–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (challenge.completed) {
      return;
    }
    
    const [dice1Value, dice2Value] = currentDiceValues;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    const isCompleted = checkChallengeCompletion(challenge, dice1Value, dice2Value);
    
    if (isCompleted) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å–ø—ã—Ç–∞–Ω–∏—è
      challenge.completed = true;
      localStorage.setItem(`challenge-${new Date().toISOString().split('T')[0]}`, JSON.stringify(challenge));
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const profile = getUserProfile();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
      profile.challengesCompleted.push(challenge.id);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
      const baseReward = challenge.baseReward;
      const bonusReward = calculateStreakBonus(profile.streakDays, baseReward);
      const totalReward = baseReward + bonusReward;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —É–¥–∞—á–∏
      addLuckPoints(totalReward);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      localStorage.setItem('diceGameUserProfile', JSON.stringify(profile));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–∞–≥—Ä–∞–¥–æ–π
      showRewardModal(totalReward, () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã
        const userProfile = getUserProfile();
        const todaysChallenge = getTodaysChallenge();
        const streakDays = userProfile.streakDays;
        renderGameInterface(userProfile, todaysChallenge, streakDays);
      });
    }
  }
});
